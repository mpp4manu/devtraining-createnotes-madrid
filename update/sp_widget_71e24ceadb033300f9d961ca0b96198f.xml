<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,$rootScope) {

	/* widget controller */
	var c = this;

	/* This fires the server-side action to retrieve the records.  */
	$rootScope.$on('selectNote', function(event,data) 
		{
			c.server.get(
				{
					action: 'getNote',
					noteID: $rootScope.noteID
				}
			).then(function(r)
				{
					c.data.title = r.data.note.title;
					c.data.note = r.data.note.note;
					c.data.noteID = r.data.note.sys_id;
				}
			);

		}
	);
	
	/* This fires the server-side action to update a note record in the DB.  */
	c.updateNote = function(updateType) {
		/* This makes a call back to the server and references input.action 'updateNote" 
		   The body of the function are the inputs sent to the server.
		*/
		c.server.get(
			{
				/* Names the action */
				action: 'updateNote',
				noteID: c.data.noteID,
				noteBody: c.data.note,
				noteTitle: c.data.title
			}
		).then(function(r) 
			{
			}
		);
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
		/* populate the 'data' object */

		if (input && input.noteID) 
		{
			/* This instantiates a DB record object */
			var note = new GlideRecord('x_snc_createnotes_note');
			
			if (note.get(input.noteID)) 
			{
				if (input.action == 'getNote') 
				{
					data.note = {};
					$sp.getRecordValues(data.note, note, "title, note, sys_id");
				}
				else if (input.action == 'updateNote') 
				{ 
					/* This takes the input from the child  */
					note.title = input.noteTitle; 
					note.note = input.noteBody; 
					/* This updates the DB record */
					note.update(); 
				}
			}
		}
	})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-06 12:33:09</sys_created_on>
        <sys_id>71e24ceadb033300f9d961ca0b96198f</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_71e24ceadb033300f9d961ca0b96198f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-06 14:59:59</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" ng-show="c.data.noteID">
  <div class="panel-heading clearfix">
    <div class="row">
      <div class="col-md-12">
        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
      </div>
    </div>
  </div>
  <div class="panel-body">
    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}" ></textarea>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
